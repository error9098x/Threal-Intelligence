"use client"

import { useState, useEffect } from "react"
import { fetchCVEData } from "@/lib/api"
import type { CVE } from "@/lib/types"
import CveItem from "@/components/cve-item"
import CveDetailsSidebar from "@/components/cve-details-sidebar"
import { Loader2 } from "lucide-react"

export default function CveFeed() {
  const [cveData, setCveData] = useState<CVE[]>([])
  const [displayedCVEs, setDisplayedCVEs] = useState<Set<string>>(new Set())
  const [lastUpdateTime, setLastUpdateTime] = useState<Date | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [selectedCve, setSelectedCve] = useState<CVE | null>(null)

  const loadCveData = async () => {
    try {
      setLoading(true)
      const data = await fetchCVEData()

      if (data && data.results && data.results.length > 0) {
        // Add only new CVEs to the list
        const newCves = data.results.filter((cve: CVE) => !displayedCVEs.has(cve.cveId))

        if (newCves.length > 0) {
          setCveData((prevData) => [...newCves, ...prevData])

          // Update the set of displayed CVEs
          const newDisplayedCVEs = new Set(displayedCVEs)
          newCves.forEach((cve: CVE) => newDisplayedCVEs.add(cve.cveId))
          setDisplayedCVEs(newDisplayedCVEs)
        }
      }

      setLastUpdateTime(new Date())
      setError(null)
    } catch (err) {
      setError("Failed to fetch CVE data. Please try again later.")
      console.error("Error fetching CVE data:", err)
    } finally {
      setLoading(false)
    }
  }

  useEffect(() => {
    loadCveData()

    // Set up auto-refresh every 30 seconds
    const intervalId = setInterval(loadCveData, 30000)

    return () => clearInterval(intervalId)
  }, [])

  const handleViewDetails = (cve: CVE) => {
    setSelectedCve(cve)
  }

  const handleCloseSidebar = () => {
    setSelectedCve(null)
  }

  return (
    <div>
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-xl font-semibold text-blue-100">Latest CVE Vulnerabilities</h2>
        <div className="flex items-center text-sm text-blue-300">
          {lastUpdateTime ? (
            <span>Last updated: {lastUpdateTime.toLocaleString()}</span>
          ) : (
            <span>Loading initial data...</span>
          )}
        </div>
      </div>

      {loading && cveData.length === 0 && (
        <div className="flex justify-center items-center py-12">
          <Loader2 className="h-8 w-8 animate-spin text-blue-500" />
          <span className="ml-2 text-blue-300">Loading CVE data...</span>
        </div>
      )}

      {error && (
        <div className="bg-red-900/20 border border-red-800 text-red-200 p-4 rounded-md">
          <p className="font-semibold">Error</p>
          <p>{error}</p>
        </div>
      )}

      <div className="space-y-4">
        {cveData.length > 0 ? (
          cveData.map((cve) => <CveItem key={cve.cveId} cve={cve} onViewDetails={() => handleViewDetails(cve)} />)
        ) : !loading && !error ? (
          <div className="text-center py-8 text-blue-300">No CVE data available for today. Check back later.</div>
        ) : null}
      </div>

      {selectedCve && <CveDetailsSidebar cve={selectedCve} onClose={handleCloseSidebar} />}
    </div>
  )
}
