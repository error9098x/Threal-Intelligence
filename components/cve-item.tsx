"use client"

import type { CVE } from "@/lib/types"

interface CveItemProps {
  cve: CVE
  onViewDetails: () => void
}

export default function CveItem({ cve, onViewDetails }: CveItemProps) {
  // Determine severity class
  let severityClass = "severity-low"
  let severityText = "Low"

  const cvssScore = Number.parseFloat(cve.maxCvssBaseScore || "0")
  if (cvssScore >= 9.0) {
    severityClass = "severity-critical"
    severityText = "Critical"
  } else if (cvssScore >= 7.0) {
    severityClass = "severity-high"
    severityText = "High"
  } else if (cvssScore >= 4.0) {
    severityClass = "severity-medium"
    severityText = "Medium"
  }

  // Format date
  const publishDate = new Date(cve.publishDate)
  const formattedDate = publishDate.toLocaleString()

  // Create tags array
  const tags = []

  if (cve.exploitExists === "1") {
    tags.push({ class: "tag-exploit", text: "Public Exploit" })
  } else if (cve.exploitExists === "2") {
    tags.push({ class: "tag-exploit", text: "Potential Exploit" })
  }

  if (cve.isInCISAKEV === "1") {
    tags.push({ class: "tag-kev", text: "CISA KEV" })
  }

  if (cve.isUsedForRansomware === "1") {
    tags.push({ class: "tag-ransomware", text: "Ransomware" })
  }

  if (cve.isOverflow === "1") {
    tags.push({ class: "tag-overflow", text: "Buffer Overflow" })
  }

  if (cve.isDenialOfService === "1") {
    tags.push({ class: "tag-dos", text: "DoS" })
  }

  return (
    <div className="glass-card rounded-lg p-4">
      <div className="flex justify-between items-center mb-2">
        <span className="font-bold text-blue-400">{cve.cveId}</span>
        <span className={`${severityClass} px-2 py-1 rounded text-xs font-bold`}>
          {cve.maxCvssBaseScore || "N/A"} {cvssScore > 0 ? `(${severityText})` : ""}
        </span>
      </div>
      <div className="text-sm text-blue-300 mb-2">Published: {formattedDate}</div>
      <p className="text-sm mb-3 text-blue-100">{cve.summary}</p>

      {tags.length > 0 && (
        <div className="flex flex-wrap gap-2 mb-3">
          {tags.map((tag, index) => (
            <span key={index} className={`${tag.class} text-xs px-2 py-1 rounded text-white`}>
              {tag.text}
            </span>
          ))}
        </div>
      )}

      <button
        className="text-sm bg-blue-900/30 hover:bg-blue-800/50 text-blue-300 hover:text-blue-100 px-3 py-1 rounded border border-blue-800/30 transition-colors"
        onClick={onViewDetails}
      >
        View More Details
      </button>
    </div>
  )
}
